package com.example.tgbot.service;

import java.io.IOException;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import com.vdurmont.emoji.EmojiParser;

@Component 
public class TelegramBot extends TelegramLongPollingBot {

    final String botName;
    final String botToken;
    @Autowired
    private UserService userService;
    @Autowired
    private ValidatorService validatorService;
    @Autowired
    private WeatherService weatherService;
    private status state = status.WAIT_FOR_COMMAND;
    public TelegramBot(@Value("${bot.name}") String botName, 
    @Value("${bot.token}") String botToken) {
        super(botToken);
        this.botName = botName;
        this.botToken = botToken;
        List<BotCommand> commands = new ArrayList<>();
        commands.add(new BotCommand("/start", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"));
        commands.add(new BotCommand("/setcity", "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥"));
        commands.add(new BotCommand("/currentcity", "–£–∑–Ω–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥"));
        commands.add(new BotCommand("/getweather", "–ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ"));
        commands.add(new BotCommand("/getforecast", "–ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞"));
        commands.add(new BotCommand("/help", "–ø–æ–º–æ—â—å"));
        try {
            SetMyCommands setMyCommands = new SetMyCommands();
            setMyCommands.setCommands(commands);
            setMyCommands.setScope(new BotCommandScopeDefault());
            setMyCommands.setLanguageCode(null); 
            execute(setMyCommands);
        } catch (TelegramApiException e) {
        }
    }
    
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String message = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();
            switch (state) {
                case WAIT_FOR_COMMAND -> {
                    try {
                        handleCommand(message, chatId, update);
                    } catch (IOException | ParseException e) {
                    }
                }
                case WAIT_FOR_CITY -> {
                    try {
                        changeCity(message, chatId);
                    } catch (ParseException | IOException ex) {
                    }
                }
                default -> sendMessage(chatId, "unknown command");
            }
        }
    }

    private void handleCommand(String cmd, long chatId, Update update) throws IOException, ParseException {
        switch (cmd.split(" ")[0]) {
            case "/start" -> startCommand(chatId, update);
            case "/setcity" -> changeCommand(chatId);
            case "/currentcity" -> getCommand(chatId);
            case "/getweather" -> handleWeather(chatId, update, true);
            case "/getforecast" -> handleWeather(chatId, update, false);
            case "/help" -> helpCommand(chatId);
            default -> sendMessage(chatId, "Unknown command");
        }
    }

    private void helpCommand(long chatId) {
        String ans = EmojiParser.parseToUnicode("""
                     –ü—Ä–∏–≤–µ—Ç! :wave: –Ø –≤–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –∏ –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é:

                     /start ‚Äî –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ :star2:
                     /setcity ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è :world_map:
                     /currentcity ‚Äî –£–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ :cityscape:
                     /getweather ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ :sunny:
                     /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ :memo:

                     """);
        sendMessage(chatId, ans);
    }
    private void changeCity(String newPlace, long chatId) throws ParseException, IOException {
        newPlace = newPlace.trim();
        if (newPlace.isEmpty()) {
            sendMessage(chatId, "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: \"–ú–æ—Å–∫–≤–∞\".");
            return;
        }
        if (checkPlace(newPlace, chatId)) {
            userService.setCity(chatId, newPlace);
            state = status.WAIT_FOR_COMMAND;
            sendMessage(chatId, "–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üéâ");
        }
    }

    private boolean checkPlace(String place, long chatId) throws ParseException, IOException {
        boolean checked = validatorService.mainCheck(place);
        if (checked) {
            return checked;
        }
        else {
            sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            return checked;
        }
    }

    private void handleWeather(long chatId, Update update, boolean flag) throws IOException, ParseException {
        String place;
        String[] cmd = update.getMessage().getText().trim().split(" ");
        if (cmd.length == 1) {
            place = userService.getCity(chatId);
        } else {
            if (checkPlace(cmd[1], chatId)) {
                place = cmd[1];
            }
            else {
                return;
            }
        }
        String msg;
        if (flag) {
            msg = weatherService.getWeather(place);
        }
        else {
            
            msg = weatherService.getForecast(place);
            System.out.println(msg);
        } 
        sendMessage(chatId, msg);
    }

    private void startCommand(long chatId, Update update) {
        String ans = EmojiParser.parseToUnicode("–ü—Ä–∏–≤–µ—Ç, " + update.getMessage().getChat().getFirstName() + "!:star2: \n" +
        "–Ø –≤–∞—à –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n" +
        "/setcity ‚Äî —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ :world_map: \n" +
        "/currentcity ‚Äî —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω :cityscape: \n" +
        "/getweather ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ :sunny:\n" +
        "/getforecast ‚Äî –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 12 —á–∞—Å–æ–≤ :cloud:\n" +
        "/help ‚Äî –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ :question:\n");
        userService.createUser(chatId);
        sendMessage(chatId, ans);
    }

     private void changeCommand(long chatId) {
         String ans = EmojiParser.parseToUnicode("""
                 –û—Ç–ª–∏—á–Ω–æ! :star2: –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,\
                  –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ. 
                 –ù–∞–ø—Ä–∏–º–µ—Ä: "–ú–æ—Å–∫–≤–∞" –∏–ª–∏ "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥".""");
         sendMessage(chatId, ans);
         state = status.WAIT_FOR_CITY;
     }

    private void getCommand(long chatId) {
        String place = userService.getCity(chatId);
        String ans;
        if (place.length() != 0) {
            ans = "–í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥: " + place;
        }
        else {
            ans = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥." + 
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcity, —á—Ç–æ–±—ã –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å!";
        }
        sendMessage(chatId, ans);
    }

    private void sendMessage(long chatId, String text) {
        SendMessage msg = new SendMessage();
        msg.setChatId(String.valueOf(chatId));
        String decoded = URLDecoder.decode(text, StandardCharsets.UTF_8);
        msg.setText(decoded);
        try {
            execute(msg);
        } catch (TelegramApiException e) {
        }
    }

    @Override
    public String getBotUsername() {
        return botName;
    }
    
    @Override
    public String getBotToken() {
        return botToken;
    }

    private enum status {
        WAIT_FOR_CITY, WAIT_FOR_COMMAND;
    }
}
